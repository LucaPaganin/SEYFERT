#!/usr/bin/env python3

import shutil
from pathlib import Path
import time
import argparse
import datetime
import logging
from typing import Dict
from configparser import ConfigParser

from seyfert.main import task_runners
from seyfert.utils import filesystem_utils as fsu
from seyfert import VERSION
import seyfert.utils.general_utils as gu
from seyfert.main.report_maker import RunReportMaker
from seyfert.utils.formatters import datetime_str_format, string_time_format
from seyfert.config import cmd_line


logger = logging.getLogger()


def program_inputs() -> "argparse.ArgumentParser":
    parser = argparse.ArgumentParser(parents=[cmd_line.forecast_task_configs_options(),
                                              cmd_line.forecast_dirs_paths_options()],
                                     add_help=False)
    parser.add_argument("--forecast_config", "-fcfg", required=False, default=None,
                        help="REQUIRED: path to the file containing the forecast configuration")
    parser.add_argument("--run_id", "-id", required=False, default=None,
                        help="OPTIONAL: ID of the run directory. If not given it will be deduced from forecast config name")
    parser.add_argument("--input_data_dir", "-i", required=False, default=fsu.default_seyfert_input_data_dir(),
                        help="REQUIRED: path to the directory containing input data for the forecast")
    parser.add_argument("--ini_file", "-ini", type=Path, required=False, default=None,
                        help="OPTIONAL: path to ini file")
    parser.add_argument("--rundir", "-rd", type=Path, required=False, default=None,
                        help="OPTIONAL: Path to an existing run directory.")

    return parser


def program_options() -> "argparse.ArgumentParser":
    parser = argparse.ArgumentParser(add_help=False, parents=[cmd_line.main_submitter_batch_options(),
                                                              cmd_line.forecast_task_flags()])
    # Flags
    parser.add_argument("--verbose", nargs='?', default=False, const=True,
                        help="OPTIONAL: Flag for being verbose")
    parser.add_argument("--test", '-t', nargs='?', default=False, const=True,
                        help="OPTIONAL: Flag for testing mode")
    parser.add_argument("--keep_cl_variations", nargs='?', default=False, const=True,
                        help="OPTIONAL: Flag for keeping varied cls for all cosmologies after the run.")
    parser.add_argument("--overwrite_results", "-ow", nargs='?', default=False, const=True,
                        help="OPTIONAL: Flag for overwriting results: fisher matrices and errors")

    return parser


def specific_program_options() -> "argparse.ArgumentParser":
    parser = argparse.ArgumentParser(description="Job submitter", parents=[program_inputs(), program_options()],
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    return parser


def check_options(args_dict: Dict) -> None:
    # Check some options values
    if args_dict['execution'] not in {'no', 'interactive', 'batch'}:
        raise ValueError(f'Invalid execution mode {args_dict["execution"]}')
    if args_dict['n_cores_per_job'] <= 0 or not isinstance(args_dict['n_cores_per_job'], int):
        raise ValueError(f'Invalid n_cores_per_job {args_dict["n_cores_per_job"]}')


def main(args_dict: "Dict") -> "None":
    t0 = time.time()
    # Log-file
    script_name = Path(__file__).name
    start_time_str = datetime_str_format(datetime.datetime.now())
    logfile = f'logfile_{script_name}_{start_time_str}.log' if not args_dict['test'] else f'logfile_test.log'
    gu.configure_logger(logger, logfile)

    gu.print_script_login(script_name, logger)

    logger.info(f'Using version {VERSION}')
    # Options and Parameters
    check_options(args_dict)
    logger.info('Parameters:')
    for key, value in args_dict.items():
        logger.info(f'{key} = {value}')

    execution = args_dict['execution']

    rundir = args_dict['rundir']
    if rundir is not None:
        rundir = Path(rundir).resolve()

    runner = task_runners.ForecastRunner(cmd_line_args=args_dict, rundir=rundir)
    runner.doForecast()
    rundir = runner.rundir

    if execution == 'batch':
        if runner.tasks['Fisher'].is_present and not any([runner.tasks[name].is_present for name in runner.tasks]):
            logger.info(f'Writing jobs report')
            rrm = RunReportMaker(rundir=rundir)
            rrm.buildTaskReportMakers()
            rrm.writeReportFiles()
            logger.info(f'\n{rrm.run_summary}')

    if runner.cl_task.is_present and not args_dict["keep_cl_variations"]:
        cl_var_dirs = runner.workspace.collectClVariationDirectories()
        for direc in cl_var_dirs.values():
            shutil.rmtree(direc)

    tf = time.time()
    logger.info(f"Total elapsed time: {string_time_format(tf-t0)}")

    logger.info("Done")
    gu.print_script_logout(script_name, logger)

    shutil.move(logfile, rundir / logfile)


if __name__ == '__main__':
    main_parser = specific_program_options()
    arguments_dict = gu.convert_keyval_params_type(vars(main_parser.parse_args()))
    ini_file = arguments_dict['ini_file']
    if ini_file is not None and ini_file != "None":
        cfg = ConfigParser()
        if not ini_file.exists():
            raise FileNotFoundError(ini_file)
        cfg.read(ini_file)
        ini_kwargs = cfg['config']
        invalid_keys = set(ini_kwargs.keys()) - set(arguments_dict.keys())
        if len(invalid_keys):
            raise KeyError(f"Invalid config keys: {''.join(invalid_keys)}")
        arguments_dict.update(ini_kwargs)

    main(arguments_dict)
