#!/usr/bin/env python3

from typing import Dict
from pathlib import Path
import re
import argparse
import logging

from seyfert.utils.general_utils import configure_logger


def program_options() -> "argparse.ArgumentParser":
    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument("--workdir", "-wd", type=Path, required=False, default=Path("."),
                        help="Working directory")
    parser.add_argument("--pattern", "-pt", type=str, required=False, default="run_*/batch_logs/out/out*.out",
                        help="Pattern for matching files")

    return parser


def main(args_dict: "Dict"):
    logger = logging.getLogger()
    configure_logger(logger)
    logger.info("Parameters:")
    for key, value in args_dict.items():
        logger.info(f"{key}: {value}")

    workdir = args_dict['workdir']

    files = list(workdir.glob(args_dict['pattern']))
    logger.info(f"Found {len(files)} out files")

    success_regex = re.compile(r"^Successfully completed\.$", re.MULTILINE)
    matches = []
    for f in files:
        match = success_regex.search(f.read_text())
        if not match:
            logger.error(f"file {f.name} does not match {success_regex.pattern}, something may have gone wrong with "
                         f"the associated run")
        matches.append(match)

    if all(matches):
        logger.info("All found runs successfully completed")


if __name__ == '__main__':
    main(vars(program_options().parse_args()))
